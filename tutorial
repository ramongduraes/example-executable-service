snet service metadata-init service/service_spec example-executable-service 0xD416d832F6AE2Ca7d9C7C05f9255Ab49b70c0fe4 --endpoints http://54.203.198.53:7018 --service-type process --encoding json --fixed-price 0
snet service publish snet example-executable-service

# Create snetd.config.json file on the root directory of the service:
# EXECUTABLE_PATH required
{
   "DAEMON_END_POINT": "http://54.203.198.53:7018",
   "ETHEREUM_JSON_RPC_ENDPOINT": "https://kovan.infura.io",
   "IPFS_END_POINT": "http://ipfs.singularitynet.io:80",
   "REGISTRY_ADDRESS_KEY": "0xe331bf20044a5b24c1a744abc90c1fd711d2c08d",
   "PASSTHROUGH_ENABLED": true,
   "EXECUTABLE_PATH": "./service/example-executable-service.py",
   "ORGANIZATION_ID": "ramonduraes",
   "SERVICE_ID": "example-executable-service",
   "PAYMENT_CHANNEL_STORAGE_SERVER": {
       "DATA_DIR": "/opt/singnet/etcd/"
   },
   "LOG": {
       "LEVEL": "debug",
       "OUTPUT": {
              "TYPE": "stdout"
           }
   }
}

python3 basic_service_one.py '{"a":12.0, "b":77.0}'

# add the shebang to the beginning of your executable and change its permissions.
# make sure not to print anything else to stdout because it'll be read by the daemon


# you only open snet daemon. The daemon listens to client calls through the blockchain and calls the service as a process when necessary.

# on root of the repository
snetd serve .

# To call
snet account balance
snet channel block-number
snet channel open-init ramonduraes example-executable-service 0 11226466
# get channel id
snet channel print-initialized
# call the service
snet client call 351 0 54.203.198.53:7018 add '{"a": 6.3, "b": 13.2}'
# response
unspent_amount_in_cogs before call (None means that we cannot get it now):0
value: 19.5



# WORKS LOCALLY WHEN RUNNING
./service/example-executable-service.py add <<< '{"a":2.3 ,"b":2.1}'

# SNET SERVICE METADATA SET MODEL : atualiza sÃ³ o protobuf e o IPFS